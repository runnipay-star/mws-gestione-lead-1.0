import React, { useState, useEffect } from 'react';
import type { Client, Service, LeadField, LeadFieldType } from '../types';
import { ApiService } from '../services/apiService';
import { PlusCircle, Trash2, Tag, ChevronDown, ChevronUp, GripVertical } from 'lucide-react';

interface ClientFormProps {
    client?: Client | null;
    onSuccess: () => void;
}

const fieldTypes: { value: LeadFieldType; label: string }[] = [
    { value: 'text', label: 'Text' },
    { value: 'email', label: 'Email' },
    { value: 'textarea', label: 'Textarea' },
    { value: 'tel', label: 'Telefono' },
    { value: 'number', label: 'Numero' },
    { value: 'date', label: 'Data' },
    { value: 'time', label: 'Ora' },
    { value: 'password', label: 'Password' },
    { value: 'url', label: 'URL' },
    { value: 'checkbox', label: 'Checkbox' },
    { value: 'radio', label: 'Radio' },
    { value: 'select', label: 'Select' },
    { value: 'file', label: 'File Upload' },
];

// Omit 'id' for new entries, as it will be generated by the API
type ServiceState = Omit<Service, 'id'> & { id?: string; isExpanded?: boolean };

const ClientForm: React.FC<ClientFormProps> = ({ client, onSuccess }) => {
    const [name, setName] = useState('');
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [services, setServices] = useState<ServiceState[]>([]);
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [draggedField, setDraggedField] = useState<{ serviceIndex: number; fieldIndex: number } | null>(null);

    const isEditing = !!client;

    useEffect(() => {
        if (isEditing) {
            setName(client.name);
            setUsername('');
            setPassword('');
            setServices((client.services || []).map(s => ({ ...s, isExpanded: false, fields: (s.fields || []).map(f => ({...f, type: f.type || 'text'})) })));
        } else {
            setName('');
            setUsername('');
            setPassword('');
            setServices([]);
        }
    }, [client, isEditing]);

    const handleServiceChange = (index: number, newName: string) => {
        const updatedServices = [...services];
        updatedServices[index].name = newName;
        setServices(updatedServices);
    };

    const handleAddService = () => {
        setServices([...services, { name: '', fields: [{ id: '', label: '', name: '', type: 'text', required: false }], isExpanded: true }]);
    };
    
    const handleRemoveService = (index: number) => {
        const updatedServices = [...services];
        updatedServices.splice(index, 1);
        setServices(updatedServices);
    };

    const handleFieldPropertyChange = (serviceIndex: number, fieldIndex: number, propName: keyof LeadField, value: any) => {
        const updatedServices = [...services];
        const field = updatedServices[serviceIndex].fields[fieldIndex];
        
        (field as any)[propName] = value;

        if (propName === 'label') {
            field.name = (value as string).toLowerCase().replace(/\s+/g, '_').replace(/[^\w-]/g, '');
        }

        if (propName === 'type') {
            if (value !== 'radio' && value !== 'select') {
                delete field.options;
            } else if (!field.options) {
                field.options = [];
            }
        }
        
        setServices(updatedServices);
    };


    const handleAddField = (serviceIndex: number) => {
        const updatedServices = [...services];
        updatedServices[serviceIndex].fields.push({ id: '', label: '', name: '', type: 'text', required: false });
        setServices(updatedServices);
    };

    const handleRemoveField = (serviceIndex: number, fieldIndex: number) => {
        const updatedServices = [...services];
        updatedServices[serviceIndex].fields.splice(fieldIndex, 1);
        setServices(updatedServices);
    };

    const handleDragStart = (e: React.DragEvent, serviceIndex: number, fieldIndex: number) => {
        setDraggedField({ serviceIndex, fieldIndex });
        e.dataTransfer.effectAllowed = 'move';
    };

    const handleDragOver = (e: React.DragEvent) => {
        e.preventDefault(); // Necessary to allow dropping
    };

    const handleDrop = (e: React.DragEvent, targetServiceIndex: number, targetFieldIndex: number) => {
        e.preventDefault();
        if (!draggedField || draggedField.serviceIndex !== targetServiceIndex || draggedField.fieldIndex === targetFieldIndex) {
            setDraggedField(null);
            return;
        }

        const { serviceIndex, fieldIndex: fromIndex } = draggedField;

        const updatedServices = [...services];
        const fields = [...updatedServices[serviceIndex].fields];
        const [removed] = fields.splice(fromIndex, 1);
        fields.splice(targetFieldIndex, 0, removed);
        
        updatedServices[serviceIndex].fields = fields;
        setServices(updatedServices);
        setDraggedField(null);
    };

    const handleDragEnd = () => {
        setDraggedField(null);
    };
    
    const toggleServiceExpand = (index: number) => {
        const updatedServices = [...services];
        updatedServices[index].isExpanded = !updatedServices[index].isExpanded;
        setServices(updatedServices);
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setError('');

        const finalServices = services
            .map(s => {
                if (!s || typeof s.name !== 'string' || s.name.trim() === '') {
                    return null;
                }

                const { isExpanded, ...serviceForApi } = s;
                
                const validFields = (s.fields || []).filter(f => 
                    f && 
                    typeof f.label === 'string' && f.label.trim() !== '' &&
                    typeof f.name === 'string' && f.name.trim() !== ''
                );

                if (validFields.length === 0) {
                    return null;
                }

                return {
                    ...serviceForApi,
                    fields: validFields,
                };
            })
            .filter(Boolean);

        if (finalServices.length === 0) {
            setError("Aggiungi almeno un servizio con un nome e almeno un campo valido.");
            return;
        }

        setIsLoading(true);
        
        try {
            if (isEditing) {
                await ApiService.updateClient(client.id, { name, services: finalServices as Service[] });
            } else {
                await ApiService.addClient(name, username, password, finalServices as Omit<Service, 'id'>[]);
            }
            onSuccess();
        } catch (err: any) {
            setError(err.message || 'Si Ã¨ verificato un errore.');
        } finally {
            setIsLoading(false);
        }
    };
    
    const inputClasses = "mt-1 block w-full px-3 py-2 bg-slate-100 dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 text-slate-900 dark:text-white";
    const fieldInputClasses = "w-full px-2 py-1.5 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md text-sm";
    const fieldLabelClasses = "text-xs font-medium text-slate-500 dark:text-gray-400";
    const actionButtonClasses = "p-1.5 rounded-md text-slate-500 dark:text-gray-400 hover:bg-slate-200 dark:hover:bg-slate-600 disabled:opacity-40 disabled:cursor-not-allowed";


    return (
        <form onSubmit={handleSubmit} className="space-y-6">
            <div>
                <label htmlFor="clientName" className="block text-sm font-medium text-slate-700 dark:text-gray-300">Nome Cliente</label>
                <input type="text" id="clientName" value={name} onChange={(e) => setName(e.target.value)} required className={inputClasses}/>
            </div>
            {!isEditing && (
                <>
                    <div>
                        <label htmlFor="username" className="block text-sm font-medium text-slate-700 dark:text-gray-300">Username Cliente</label>
                        <input type="text" id="username" value={username} onChange={(e) => setUsername(e.target.value)} required className={inputClasses} />
                    </div>
                    <div>
                        <label htmlFor="password" className="block text-sm font-medium text-slate-700 dark:text-gray-300">Password Cliente</label>
                        <input type="password" id="password" value={password} onChange={(e) => setPassword(e.target.value)} required className={inputClasses} />
                    </div>
                </>
            )}

            <fieldset className="border-t border-slate-200 dark:border-slate-700 pt-4">
                <legend className="text-sm font-medium text-slate-700 dark:text-gray-300 mb-2">Servizi e Campi Specifici</legend>
                <div className="space-y-3">
                    {services.map((service, serviceIndex) => (
                        <div key={service.id || serviceIndex} className="bg-slate-50 dark:bg-slate-900 border border-slate-200 dark:border-slate-700 rounded-lg">
                            <div className="flex items-center p-3 cursor-pointer" onClick={() => toggleServiceExpand(serviceIndex)}>
                                <Tag className="mr-2 text-primary-500 dark:text-primary-400" size={18}/>
                                <input
                                    type="text"
                                    placeholder="Nome Servizio (es. Tagliando)"
                                    value={service.name}
                                    onChange={e => handleServiceChange(serviceIndex, e.target.value)}
                                    onClick={e => e.stopPropagation()}
                                    className="flex-grow font-semibold bg-transparent focus:outline-none focus:ring-0 border-0 p-0"
                                />
                                <button type="button" onClick={(e) => { e.stopPropagation(); handleRemoveService(serviceIndex); }} className="p-2 text-red-500 hover:text-red-400 ml-2">
                                    <Trash2 size={16} />
                                </button>
                                {service.isExpanded ? <ChevronUp size={20} /> : <ChevronDown size={20} />}
                            </div>

                            {service.isExpanded && (
                                <div className="p-4 border-t border-slate-200 dark:border-slate-700 space-y-3">
                                    <h4 className="text-sm font-semibold text-slate-600 dark:text-gray-400">Campi per questo servizio:</h4>
                                    {service.fields.map((field, fieldIndex) => (
                                       <div
                                            key={field.id || fieldIndex}
                                            draggable
                                            onDragStart={(e) => handleDragStart(e, serviceIndex, fieldIndex)}
                                            onDragOver={handleDragOver}
                                            onDrop={(e) => handleDrop(e, serviceIndex, fieldIndex)}
                                            onDragEnd={handleDragEnd}
                                            className={`flex items-start gap-x-1 p-3 bg-slate-100 dark:bg-slate-800 rounded-md border border-slate-200 dark:border-slate-700 transition-opacity ${
                                                draggedField?.fieldIndex === fieldIndex && draggedField?.serviceIndex === serviceIndex ? 'opacity-40' : 'opacity-100'
                                            }`}
                                        >
                                            <div className="cursor-move text-slate-400 dark:text-gray-500 pt-7" title="Trascina per riordinare">
                                                <GripVertical size={20} />
                                            </div>
                                            <div className="flex-grow grid grid-cols-12 gap-x-4 gap-y-2 items-center">
                                                <div className="col-span-12 md:col-span-5">
                                                    <label className={fieldLabelClasses}>Etichetta Campo</label>
                                                    <input
                                                        type="text"
                                                        placeholder={`Etichetta Campo ${fieldIndex + 1}`}
                                                        value={field.label}
                                                        onChange={e => handleFieldPropertyChange(serviceIndex, fieldIndex, 'label', e.target.value)}
                                                        className={fieldInputClasses}
                                                    />
                                                </div>
                                                <div className="col-span-12 md:col-span-4">
                                                    <label className={fieldLabelClasses}>Tipo Campo</label>
                                                    <select 
                                                        value={field.type}
                                                        onChange={(e) => handleFieldPropertyChange(serviceIndex, fieldIndex, 'type', e.target.value as LeadFieldType)}
                                                        className={fieldInputClasses}
                                                    >
                                                        {fieldTypes.map(ft => <option key={ft.value} value={ft.value}>{ft.label}</option>)}
                                                    </select>
                                                </div>
                                                <div className="col-span-7 md:col-span-2 self-end pb-1.5">
                                                     <label className="flex items-center space-x-2 cursor-pointer text-sm text-slate-600 dark:text-gray-400">
                                                        <input
                                                            type="checkbox"
                                                            checked={!!field.required}
                                                            onChange={e => handleFieldPropertyChange(serviceIndex, fieldIndex, 'required', e.target.checked)}
                                                            className="h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-500"
                                                        />
                                                        <span>Obbligatorio</span>
                                                    </label>
                                                </div>
                                                <div className="col-span-5 md:col-span-1 flex items-center justify-end self-end pb-1.5">
                                                    <button type="button" onClick={() => handleRemoveField(serviceIndex, fieldIndex)} className={`${actionButtonClasses} text-red-500 hover:bg-red-500/10`}>
                                                        <Trash2 size={16} />
                                                    </button>
                                                </div>
                                                
                                                <div className="col-span-12 md:col-span-5">
                                                    <label className={fieldLabelClasses}>Nome (API)</label>
                                                    <input
                                                        type="text"
                                                        value={field.name}
                                                        readOnly
                                                        className="w-full px-2 py-1.5 bg-slate-200 dark:bg-slate-900/50 border border-slate-300 dark:border-slate-600 rounded-md text-gray-500 dark:text-gray-400 text-sm"
                                                    />
                                                </div>
                                                {(field.type === 'select' || field.type === 'radio') && (
                                                    <div className="col-span-12 md:col-span-7">
                                                        <label className={fieldLabelClasses}>Opzioni (separate da virgola)</label>
                                                        <input
                                                            type="text"
                                                            placeholder="Opzione 1, Opzione 2, Opzione 3"
                                                            value={field.options?.join(', ') || ''}
                                                            onChange={e => handleFieldPropertyChange(serviceIndex, fieldIndex, 'options', (e.target.value || '').split(',').map(opt => opt.trim()))}
                                                            className={`w-full ${fieldInputClasses}`}
                                                        />
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                    ))}
                                    <button type="button" onClick={() => handleAddField(serviceIndex)} className="mt-2 flex items-center text-sm text-primary-600 dark:text-primary-400 hover:text-primary-500 dark:hover:text-primary-300">
                                        <PlusCircle size={16} className="mr-1" />
                                        Aggiungi Campo
                                    </button>
                                </div>
                            )}
                        </div>
                    ))}
                </div>
                 <button type="button" onClick={handleAddService} className="mt-4 flex items-center text-sm font-semibold bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-gray-300 hover:bg-slate-300 dark:hover:bg-slate-600 px-4 py-2 rounded-lg">
                    <PlusCircle size={18} className="mr-2" />
                    Aggiungi Nuovo Servizio
                </button>
            </fieldset>

            {error && <p className="text-sm text-red-500 dark:text-red-400 mt-4">{error}</p>}
            
            <div className="flex justify-end pt-4 border-t border-slate-200 dark:border-slate-700">
                <button type="submit" disabled={isLoading} className="bg-primary-600 text-white px-4 py-2 rounded-lg shadow hover:bg-primary-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                    {isLoading ? 'Salvataggio...' : (isEditing ? 'Salva Modifiche' : 'Crea Cliente')}
                </button>
            </div>
        </form>
    );
};

export default ClientForm;